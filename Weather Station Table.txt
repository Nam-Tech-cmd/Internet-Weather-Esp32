#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <TFT_eSPI.h>
#include <time.h>

TFT_eSPI tft = TFT_eSPI();

const char* ssid = "Banana";
const char* password = "87654321";
const String apiKey = "yourapikey";
const float latitude = 12.014396;
const float longitude = 109.116052;
String units = "metric";
const String lang = "en";
String WDescription = "";

float temperature = 0, humidity = 0, windSpeed = 0, pressure = 0;
float minT = -4.44, maxT = 44.44;
int counter = 0;
unsigned long timePased = 0;
int ani = 100;

uint16_t grays[] = {TFT_WHITE, 0xCE59, 0xAD55, 0x8430, 0x6B4D, 0x528A, 0x39C7, 0x2104, 0x18C3, 0x1082, TFT_BLACK};
uint16_t bck = TFT_BLACK;
float lastTemp = 0;
String PPlbl[] = {"HUMI", "PRES", "WIND"};
String PPlblU[] = {" %", " hPa", " m/s"};
float wData[3];

// ==== NTP TIME ====
const char* ntpServer = "pool.ntp.org";
char timeStr[9];

void syncTime() {
  configTime(7 * 3600, 0, ntpServer);
  while (time(nullptr) < 100000) delay(100);
}

String getCurrentTime() {
  time_t now = time(nullptr);
  struct tm* tm_info = localtime(&now);
  sprintf(timeStr, "%02d:%02d:%02d", tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec);
  return String(timeStr);
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  syncTime();
  tft.init();
  tft.setRotation(1);
  tft.fillScreen(bck);
  getData();
}

void getData() {
  Serial.println("getData() called...");
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://api.openweathermap.org/data/2.5/weather?lat=" + String(latitude, 4) + "&lon=" + String(longitude, 4) + "&appid=" + apiKey + "&units=" + units;
    Serial.println("Requesting: " + url);
    http.begin(url);
    int httpCode = http.GET();
    Serial.print("HTTP Code: ");
    Serial.println(httpCode);
     if (httpCode == 200) {
      String payload = http.getString();
      Serial.println("Payload:");
      Serial.println(payload);
      DynamicJsonDocument doc(2096);
      DeserializationError error = deserializeJson(doc, payload);
      if (error) {
        Serial.print("deserializeJson() failed: ");
        Serial.println(error.c_str());
        return;
      }
      WDescription = doc["weather"][0]["description"].as<String>();
      temperature = doc["main"]["temp"].as<float>();
      humidity = doc["main"]["humidity"].as<float>();
      pressure = doc["main"]["pressure"].as<float>();
      windSpeed = doc["wind"]["speed"].as<float>();
    } else {
      Serial.println("HTTP GET failed.");
    }
    http.end();
  } else {
    Serial.println("WiFi not connected.");
  }

  wData[0] = humidity;
  wData[1] = pressure;
  wData[2] = windSpeed;
}

void updateData() {
  ani--;
  if (ani < -420) ani = 100;
  if (millis() > timePased + 60000) {
    timePased = millis();
    counter++;
    getData();
    if (counter == 2) {
      counter = 0;
      if (temperature != lastTemp) {
        maxT = max(temperature, lastTemp);
        minT = min(temperature, lastTemp);
      lastTemp = temperature;
      }
    }
  }
}

void draw() {
  tft.fillScreen(bck);

  // Đường phân chia dọc và ngang
  tft.drawLine(130, 40, 130, 140, grays[6]);
  tft.drawLine(0, 140, 280, 140, grays[6]);
  tft.drawLine(0, 40, 280, 40, grays[4]);
  tft.drawLine(0, 190, 280, 190, grays[6]);
  tft.drawLine(80, 0, 90, 40, grays[4]);
  tft.drawLine(180, 0, 170, 40, grays[4]);

  // Mô tả thời tiết
  tft.setTextDatum(0);
  tft.setTextColor(grays[1], bck);
  tft.drawString(WDescription, 5, 160);

  // Phần tiêu đề
  tft.setTextColor(grays[3], bck);
  tft.drawString("WEATHER", 20, 10);
  tft.drawString("LOCATION", 200, 10);

  // Thông tin thị trấn
  tft.setTextColor(grays[2], bck);
  tft.drawString("CITY:", 6, 100);
  tft.setTextColor(grays[3], bck);
  tft.drawString("Cam Ranh", 50, 100);

  // Thời gian
  tft.setTextSize(2);
  tft.setTextColor(grays[3], bck);
  tft.drawString(getCurrentTime().substring(0, 5), 6, 120);

  // Nhiệt độ
  tft.setTextSize(2);
  tft.setTextDatum(4);
  tft.setTextColor(grays[1], bck);
  tft.drawFloat(temperature, 1, 60, 60);

  // Thông tin thời tiết Internet
  tft.setTextSize(1);
  tft.setTextColor(grays[2], bck);
  tft.drawString("INTERNET", 130, 10);
  tft.drawString("STATION", 130, 25);

  // Biểu đồ 12 giờ
  tft.setTextDatum(0);
  tft.setTextColor(grays[2], bck);
  tft.drawString("LAST 12 HOURS", 170, 60);

  // Giá trị min/max
  tft.setTextColor(grays[3], bck);
  tft.drawString("MIN: " + String(minT), 170, 80);
  tft.drawString("MAX: " + String(maxT), 170, 95);

  // Dữ liệu phụ: độ ẩm, áp suất, gió
  for (int i = 0; i < 3; i++) {
    int x = 20 + (i * 81);
    int y = 200;
    int w = 75;
    int h = 40;
    tft.fillSmoothRoundRect(x, y, w, h, 4, grays[9], bck);
    tft.setTextDatum(4);
    tft.setTextColor(grays[1], grays[9]);
    tft.drawString(PPlbl[i], x + w / 2, y + 10);
    tft.setTextColor(grays[2], grays[9]);
    tft.drawString(String((int)wData[i]) + PPlblU[i], x + w / 2, y + 26);
  }
}

void loop() {
  updateData();
  draw();
  delay(60000);
}

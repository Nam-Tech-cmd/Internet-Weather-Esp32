#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <TFT_eSPI.h>    
#include "time.h"       

const char* ssid = " ";
const char* password = " ";

const char* openWeatherApiKey = " "; 
const char* city = " "; 
const char* countryCode = " "; 
const char* units = "metric"; 

const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 7 * 3600; 
const int daylightOffset_sec = 0;   

const unsigned long WEATHER_UPDATE_INTERVAL_MS = 15 * 60 * 1000; 
unsigned long lastWeatherUpdateTime = 0; 

float temperature = 0.0;
String weatherDescription = "Updating..."; 
String weatherIconCode = ""; 

TFT_eSPI tft = TFT_eSPI();

const size_t JSON_DOC_SIZE = 512; 

void connectWiFi() {
    Serial.print("Connecting to WiFi");
    tft.setTextColor(TFT_WHITE, TFT_BLACK); 
    tft.setCursor(0, 50); 
    tft.print("Connecting WiFi"); 
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
        tft.print("."); 
    }
    Serial.println("\nWiFi connected");
    tft.fillRect(0, 50, tft.width(), 20, TFT_BLACK); 
    IPAddress ipAddress = WiFi.localIP();

    tft.setTextColor(TFT_WHITE, TFT_BLACK); 
    tft.setCursor(0, 50); 
    tft.print("IP: ");
    tft.print(ipAddress);
    Serial.print("IP Address: ");
    Serial.println(ipAddress);
}

void setupTime() {
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    Serial.println("Waiting for NTP time");
    tft.setTextColor(TFT_WHITE, TFT_BLACK); 
    tft.setTextSize(2); 
    tft.setCursor(0, 70);
    tft.print("Syncing time...");
    struct tm timeinfo;
    while (!getLocalTime(&timeinfo)) {
        delay(1000);
        Serial.print(".");
        tft.drawString(".", tft.getCursorX(), tft.getCursorY()); 
    }
    Serial.println("\nTime synchronized");
    tft.setTextColor(TFT_WHITE, TFT_BLACK); 
    tft.setTextSize(2); 
    tft.setCursor(0, 90); 
    tft.println("\nTime synced");
    tft.fillScreen(TFT_BLACK);
}

void getWeatherData() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi not connected for weather update.");
        weatherDescription = "No WiFi"; 
        temperature = NAN; 
        return;
    }

    String url = "http://api.openweathermap.org/data/2.5/weather?q=";
    url += city;
    url += ",";
    url += countryCode;
    url += "&appid=";
    url += openWeatherApiKey;
    url += "&units=";
    url += units;

    Serial.println("Fetching weather data...");
    Serial.println(url);
    weatherDescription = "Fetching..."; 
    temperature = NAN; 

    HTTPClient http;
    http.begin(url);
    int httpCode = http.GET(); 

    if (httpCode == HTTP_CODE_OK) {  
        String payload = http.getString();
        Serial.println("Weather data received:");
        Serial.println(payload);
 
        JsonDocument doc;  
        DeserializationError error = deserializeJson(doc, payload);

        if (error) {
            Serial.print("JSON parsing failed: ");
            Serial.println(error.c_str());
            weatherDescription = "JSON Error";  
            temperature = NAN;
        } else {
            if (doc["main"]["temp"].isNull() || doc["weather"][0]["description"].isNull()) {
                 Serial.println("Missing weather data in JSON response.");
                 weatherDescription = "Data Missing";  
                 temperature = NAN;
            } else {
                temperature = doc["main"]["temp"].as<float>();
                                 weatherDescription = doc["weather"][0]["description"].as<String>();
                              Serial.printf("Temp: %.1f degC, Desc: %s\n", temperature, weatherDescription.c_str());
            }
        }
    } else {
        Serial.printf("HTTP request failed, error code: %d\n", httpCode);
        weatherDescription = "HTTP Error " + String(httpCode); // BĂ¡o lá»—i HTTP trĂªn mĂ n hĂ¬nh
        temperature = NAN;
    }

    http.end(); 
}

void displayDateTime() {
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
        Serial.println("Failed to obtain time");
        tft.setTextColor(TFT_RED);
        tft.drawString("Time Error", 10, 10);  
        return;
    }

    char timeOutput[9];
    strftime(timeOutput, sizeof(timeOutput), "%H:%M:%S", &timeinfo);
 
    char dateOutput[11];
    strftime(dateOutput, sizeof(dateOutput), "%d/%m/%Y", &timeinfo);

    tft.setTextColor(TFT_GREEN, TFT_BLACK); 
    tft.setTextSize(3); 
    tft.setCursor(30, 20); 
    tft.print(dateOutput);

    tft.setTextColor(TFT_YELLOW, TFT_BLACK); 
    tft.setTextSize(3);
    tft.setCursor(40, 100);
    tft.print(timeOutput); 
}

void displayWeather() {
    int weatherAreaY = 180; 
    tft.fillRect(0, weatherAreaY, tft.width(), tft.height() - weatherAreaY, TFT_BLACK); 
    tft.setTextSize(2); 

    tft.setTextColor(TFT_CYAN, TFT_BLACK); 
    tft.setCursor(0, weatherAreaY + 30); 

    if (isnan(temperature)) {
        tft.print("Temp: --- C"); 
    } else {
        String tempString = String(temperature, 1);
        if (strcmp(units, "metric") == 0) tempString += " C";
        else if (strcmp(units, "imperial") == 0) tempString += " F";
        else tempString += " K";

        tft.print("Temp: ");
        tft.print(tempString);
    }

    tft.setCursor(0, weatherAreaY + 50); 
    tft.print("Cond: "); 
    tft.print(weatherDescription);
}

void setup() {
    Serial.begin(115200); 
    tft.begin();

    tft.fillScreen(TFT_BLACK); 
    tft.setTextColor(TFT_ORANGE); 
    tft.setTextWrap(false); 
    tft.setCursor(30, 0); 
    tft.setTextSize(2);
    Serial.println("TFT Initialized");
    tft.println("Weather Station");

    connectWiFi(); 
    setupTime();   
    getWeatherData();
    lastWeatherUpdateTime = millis();
}

void loop() {
    displayDateTime();
    if (millis() - lastWeatherUpdateTime >= WEATHER_UPDATE_INTERVAL_MS) {
        getWeatherData(); 
        lastWeatherUpdateTime = millis();
    }
    displayWeather();
    delay(30);
}